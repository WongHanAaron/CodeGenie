//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Development\CodeGenie\src\CodeGenie.Core\ANTLR\CodeGenie.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CodeGenieParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, PUBLIC=19, PRIVATE=20, PROTECTED=21, OPEN_S=22, CLOSE_S=23, 
		DIVIDER=24, LIST_DIVIDER=25, INTERFACE=26, CLASS=27, NAME=28, NUMBER=29, 
		STRING=30, WS=31;
	public const int
		RULE_componentDefinition = 0, RULE_component = 1, RULE_component_type = 2, 
		RULE_component_details = 3, RULE_tags = 4, RULE_tag = 5, RULE_purpose = 6, 
		RULE_attributes = 7, RULE_attribute = 8, RULE_attribute_details = 9, RULE_methods = 10, 
		RULE_method = 11, RULE_parameter = 12, RULE_method_details = 13, RULE_relationships = 14, 
		RULE_relationship = 15, RULE_cardinality = 16, RULE_cardinality_count = 17, 
		RULE_dependency = 18, RULE_dependency_details = 19, RULE_composes = 20, 
		RULE_composes_details = 21, RULE_aggregates = 22, RULE_aggregates_details = 23, 
		RULE_realizes = 24, RULE_realizes_details = 25, RULE_specializes = 26, 
		RULE_specializes_details = 27, RULE_access_scope = 28, RULE_value = 29, 
		RULE_type = 30;
	public static readonly string[] ruleNames = {
		"componentDefinition", "component", "component_type", "component_details", 
		"tags", "tag", "purpose", "attributes", "attribute", "attribute_details", 
		"methods", "method", "parameter", "method_details", "relationships", "relationship", 
		"cardinality", "cardinality_count", "dependency", "dependency_details", 
		"composes", "composes_details", "aggregates", "aggregates_details", "realizes", 
		"realizes_details", "specializes", "specializes_details", "access_scope", 
		"value", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'tags'", "'purpose'", "'attributes'", "'methods'", "'('", "')'", 
		"'relationships'", "'cardinality'", "'...'", "'*'", "'depends'", "'composes'", 
		"'aggregates'", "'realizes'", "'specializes'", "'<'", "'>'", "'[]'", null, 
		null, null, "'{'", "'}'", "':'", "','", "'interface'", "'class'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "PUBLIC", "PRIVATE", "PROTECTED", 
		"OPEN_S", "CLOSE_S", "DIVIDER", "LIST_DIVIDER", "INTERFACE", "CLASS", 
		"NAME", "NUMBER", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CodeGenie.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CodeGenieParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CodeGenieParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CodeGenieParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComponentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComponentContext[] component() {
			return GetRuleContexts<ComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentContext component(int i) {
			return GetRuleContext<ComponentContext>(i);
		}
		public ComponentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDefinitionContext componentDefinition() {
		ComponentDefinitionContext _localctx = new ComponentDefinitionContext(Context, State);
		EnterRule(_localctx, 0, RULE_componentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			component();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED))) != 0)) {
				{
				{
				State = 63;
				component();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_scopeContext access_scope() {
			return GetRuleContext<Access_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CodeGenieParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDER() { return GetToken(CodeGenieParser.DIVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_typeContext component_type() {
			return GetRuleContext<Component_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_detailsContext component_details() {
			return GetRuleContext<Component_detailsContext>(0);
		}
		public ComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentContext component() {
		ComponentContext _localctx = new ComponentContext(Context, State);
		EnterRule(_localctx, 2, RULE_component);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			access_scope();
			State = 70;
			Match(NAME);
			State = 71;
			Match(DIVIDER);
			State = 72;
			component_type();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 73;
				component_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(CodeGenieParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CodeGenieParser.CLASS, 0); }
		public Component_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_typeContext component_type() {
		Component_typeContext _localctx = new Component_typeContext(Context, State);
		EnterRule(_localctx, 4, RULE_component_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_la = TokenStream.LA(1);
			if ( !(_la==INTERFACE || _la==CLASS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext[] purpose() {
			return GetRuleContexts<PurposeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose(int i) {
			return GetRuleContext<PurposeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodsContext[] methods() {
			return GetRuleContexts<MethodsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodsContext methods(int i) {
			return GetRuleContext<MethodsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationshipsContext[] relationships() {
			return GetRuleContexts<RelationshipsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationshipsContext relationships(int i) {
			return GetRuleContext<RelationshipsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public Component_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_detailsContext component_details() {
		Component_detailsContext _localctx = new Component_detailsContext(Context, State);
		EnterRule(_localctx, 6, RULE_component_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(OPEN_S);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 79;
					purpose();
					}
					break;
				case T__2:
					{
					State = 80;
					attributes();
					}
					break;
				case T__3:
					{
					State = 81;
					methods();
					}
					break;
				case T__6:
					{
					State = 82;
					relationships();
					}
					break;
				case T__0:
					{
					State = 83;
					tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__6))) != 0) );
			State = 88;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		public TagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tags; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagsContext tags() {
		TagsContext _localctx = new TagsContext(Context, State);
		EnterRule(_localctx, 8, RULE_tags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__0);
			State = 91;
			Match(OPEN_S);
			State = 92;
			tag();
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING) {
				{
				{
				State = 93;
				tag();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CodeGenieParser.STRING, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 10, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurposeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDER() { return GetToken(CodeGenieParser.DIVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PurposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purpose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurpose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurposeContext purpose() {
		PurposeContext _localctx = new PurposeContext(Context, State);
		EnterRule(_localctx, 12, RULE_purpose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__1);
			State = 104;
			Match(DIVIDER);
			State = 105;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 14, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(T__2);
			State = 108;
			Match(OPEN_S);
			State = 109;
			attribute();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED))) != 0)) {
				{
				{
				State = 110;
				attribute();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_scopeContext access_scope() {
			return GetRuleContext<Access_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CodeGenieParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDER() { return GetToken(CodeGenieParser.DIVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_detailsContext attribute_details() {
			return GetRuleContext<Attribute_detailsContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 16, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			access_scope();
			State = 119;
			Match(NAME);
			State = 120;
			Match(DIVIDER);
			State = 121;
			type();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 122;
				attribute_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose() {
			return GetRuleContext<PurposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public Attribute_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_detailsContext attribute_details() {
		Attribute_detailsContext _localctx = new Attribute_detailsContext(Context, State);
		EnterRule(_localctx, 18, RULE_attribute_details);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(OPEN_S);
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 126;
				purpose();
				}
				break;
			case T__0:
				{
				State = 127;
				tags();
				}
				break;
			case CLOSE_S:
				break;
			default:
				break;
			}
			State = 130;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		public MethodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodsContext methods() {
		MethodsContext _localctx = new MethodsContext(Context, State);
		EnterRule(_localctx, 20, RULE_methods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__3);
			State = 133;
			Match(OPEN_S);
			State = 134;
			method();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED))) != 0)) {
				{
				{
				State = 135;
				method();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_scopeContext access_scope() {
			return GetRuleContext<Access_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CodeGenieParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDER() { return GetToken(CodeGenieParser.DIVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_detailsContext method_details() {
			return GetRuleContext<Method_detailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_DIVIDER() { return GetTokens(CodeGenieParser.LIST_DIVIDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_DIVIDER(int i) {
			return GetToken(CodeGenieParser.LIST_DIVIDER, i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 22, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			access_scope();
			State = 144;
			Match(NAME);
			State = 145;
			Match(T__4);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 146;
				parameter();
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LIST_DIVIDER) {
					{
					{
					State = 147;
					Match(LIST_DIVIDER);
					State = 148;
					parameter();
					}
					}
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 156;
			Match(T__5);
			State = 157;
			Match(DIVIDER);
			State = 158;
			type();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 159;
				method_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CodeGenieParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDER() { return GetToken(CodeGenieParser.DIVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(NAME);
			State = 163;
			Match(DIVIDER);
			State = 164;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose() {
			return GetRuleContext<PurposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public Method_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_detailsContext method_details() {
		Method_detailsContext _localctx = new Method_detailsContext(Context, State);
		EnterRule(_localctx, 26, RULE_method_details);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(OPEN_S);
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 167;
				purpose();
				}
				break;
			case T__0:
				{
				State = 168;
				tags();
				}
				break;
			case CLOSE_S:
				break;
			default:
				break;
			}
			State = 171;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationshipsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationshipContext[] relationship() {
			return GetRuleContexts<RelationshipContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationshipContext relationship(int i) {
			return GetRuleContext<RelationshipContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_DIVIDER() { return GetTokens(CodeGenieParser.LIST_DIVIDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_DIVIDER(int i) {
			return GetToken(CodeGenieParser.LIST_DIVIDER, i);
		}
		public RelationshipsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationships; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationships(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipsContext relationships() {
		RelationshipsContext _localctx = new RelationshipsContext(Context, State);
		EnterRule(_localctx, 28, RULE_relationships);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__6);
			State = 174;
			Match(OPEN_S);
			State = 175;
			relationship();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIST_DIVIDER) {
				{
				{
				State = 176;
				Match(LIST_DIVIDER);
				State = 177;
				relationship();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 183;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationshipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DependencyContext dependency() {
			return GetRuleContext<DependencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComposesContext composes() {
			return GetRuleContext<ComposesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregatesContext aggregates() {
			return GetRuleContext<AggregatesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealizesContext realizes() {
			return GetRuleContext<RealizesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecializesContext specializes() {
			return GetRuleContext<SpecializesContext>(0);
		}
		public RelationshipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationship; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationship(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipContext relationship() {
		RelationshipContext _localctx = new RelationshipContext(Context, State);
		EnterRule(_localctx, 30, RULE_relationship);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				dependency();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				composes();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187;
				aggregates();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188;
				realizes();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				specializes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDER() { return GetToken(CodeGenieParser.DIVIDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cardinality_countContext[] cardinality_count() {
			return GetRuleContexts<Cardinality_countContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cardinality_countContext cardinality_count(int i) {
			return GetRuleContext<Cardinality_countContext>(i);
		}
		public CardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CardinalityContext cardinality() {
		CardinalityContext _localctx = new CardinalityContext(Context, State);
		EnterRule(_localctx, 32, RULE_cardinality);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__7);
			State = 193;
			Match(DIVIDER);
			State = 194;
			cardinality_count();
			State = 195;
			Match(T__8);
			State = 196;
			cardinality_count();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cardinality_countContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CodeGenieParser.NUMBER, 0); }
		public Cardinality_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardinality_count; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinality_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cardinality_countContext cardinality_count() {
		Cardinality_countContext _localctx = new Cardinality_countContext(Context, State);
		EnterRule(_localctx, 34, RULE_cardinality_count);
		int _la;
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				Match(T__9);
				}
				break;
			case T__0:
			case T__1:
			case T__7:
			case T__8:
			case CLOSE_S:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NUMBER) {
					{
					State = 199;
					Match(NUMBER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dependency_detailsContext dependency_details() {
			return GetRuleContext<Dependency_detailsContext>(0);
		}
		public DependencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DependencyContext dependency() {
		DependencyContext _localctx = new DependencyContext(Context, State);
		EnterRule(_localctx, 36, RULE_dependency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__10);
			State = 205;
			type();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 206;
				dependency_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependency_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext[] purpose() {
			return GetRuleContexts<PurposeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose(int i) {
			return GetRuleContext<PurposeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public Dependency_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependency_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependency_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependency_detailsContext dependency_details() {
		Dependency_detailsContext _localctx = new Dependency_detailsContext(Context, State);
		EnterRule(_localctx, 38, RULE_dependency_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(OPEN_S);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 212;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 210;
					purpose();
					}
					break;
				case T__0:
					{
					State = 211;
					tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__1 );
			State = 216;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComposesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Composes_detailsContext composes_details() {
			return GetRuleContext<Composes_detailsContext>(0);
		}
		public ComposesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComposesContext composes() {
		ComposesContext _localctx = new ComposesContext(Context, State);
		EnterRule(_localctx, 40, RULE_composes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__11);
			State = 219;
			type();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 220;
				composes_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composes_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext[] purpose() {
			return GetRuleContexts<PurposeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose(int i) {
			return GetRuleContext<PurposeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardinalityContext[] cardinality() {
			return GetRuleContexts<CardinalityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardinalityContext cardinality(int i) {
			return GetRuleContext<CardinalityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public Composes_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composes_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposes_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composes_detailsContext composes_details() {
		Composes_detailsContext _localctx = new Composes_detailsContext(Context, State);
		EnterRule(_localctx, 42, RULE_composes_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(OPEN_S);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 227;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 224;
					purpose();
					}
					break;
				case T__7:
					{
					State = 225;
					cardinality();
					}
					break;
				case T__0:
					{
					State = 226;
					tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__7))) != 0) );
			State = 231;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregatesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregates_detailsContext aggregates_details() {
			return GetRuleContext<Aggregates_detailsContext>(0);
		}
		public AggregatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregates; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregatesContext aggregates() {
		AggregatesContext _localctx = new AggregatesContext(Context, State);
		EnterRule(_localctx, 44, RULE_aggregates);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(T__12);
			State = 234;
			type();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 235;
				aggregates_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregates_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext[] purpose() {
			return GetRuleContexts<PurposeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose(int i) {
			return GetRuleContext<PurposeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardinalityContext[] cardinality() {
			return GetRuleContexts<CardinalityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardinalityContext cardinality(int i) {
			return GetRuleContext<CardinalityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public Aggregates_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregates_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregates_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregates_detailsContext aggregates_details() {
		Aggregates_detailsContext _localctx = new Aggregates_detailsContext(Context, State);
		EnterRule(_localctx, 46, RULE_aggregates_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(OPEN_S);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 242;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 239;
					purpose();
					}
					break;
				case T__7:
					{
					State = 240;
					cardinality();
					}
					break;
				case T__0:
					{
					State = 241;
					tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__7))) != 0) );
			State = 246;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealizesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Realizes_detailsContext realizes_details() {
			return GetRuleContext<Realizes_detailsContext>(0);
		}
		public RealizesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realizes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealizes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealizesContext realizes() {
		RealizesContext _localctx = new RealizesContext(Context, State);
		EnterRule(_localctx, 48, RULE_realizes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(T__13);
			State = 249;
			type();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 250;
				realizes_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realizes_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext[] purpose() {
			return GetRuleContexts<PurposeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose(int i) {
			return GetRuleContext<PurposeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public Realizes_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realizes_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealizes_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realizes_detailsContext realizes_details() {
		Realizes_detailsContext _localctx = new Realizes_detailsContext(Context, State);
		EnterRule(_localctx, 50, RULE_realizes_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(OPEN_S);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 256;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 254;
					purpose();
					}
					break;
				case T__0:
					{
					State = 255;
					tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__1 );
			State = 260;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecializesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specializes_detailsContext specializes_details() {
			return GetRuleContext<Specializes_detailsContext>(0);
		}
		public SpecializesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specializes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecializes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecializesContext specializes() {
		SpecializesContext _localctx = new SpecializesContext(Context, State);
		EnterRule(_localctx, 52, RULE_specializes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(T__14);
			State = 263;
			type();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_S) {
				{
				State = 264;
				specializes_details();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specializes_detailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_S() { return GetToken(CodeGenieParser.OPEN_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_S() { return GetToken(CodeGenieParser.CLOSE_S, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext[] purpose() {
			return GetRuleContexts<PurposeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurposeContext purpose(int i) {
			return GetRuleContext<PurposeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext[] tags() {
			return GetRuleContexts<TagsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsContext tags(int i) {
			return GetRuleContext<TagsContext>(i);
		}
		public Specializes_detailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specializes_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecializes_details(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specializes_detailsContext specializes_details() {
		Specializes_detailsContext _localctx = new Specializes_detailsContext(Context, State);
		EnterRule(_localctx, 54, RULE_specializes_details);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(OPEN_S);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 270;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 268;
					purpose();
					}
					break;
				case T__0:
					{
					State = 269;
					tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__1 );
			State = 274;
			Match(CLOSE_S);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(CodeGenieParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(CodeGenieParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(CodeGenieParser.PROTECTED, 0); }
		public Access_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_scope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_scopeContext access_scope() {
		Access_scopeContext _localctx = new Access_scopeContext(Context, State);
		EnterRule(_localctx, 56, RULE_access_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CodeGenieParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CodeGenieParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LIST_DIVIDER() { return GetTokens(CodeGenieParser.LIST_DIVIDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_DIVIDER(int i) {
			return GetToken(CodeGenieParser.LIST_DIVIDER, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeGenieVisitor<TResult> typedVisitor = visitor as ICodeGenieVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(NAME);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 281;
				Match(T__15);
				State = 282;
				type();
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LIST_DIVIDER) {
					{
					{
					State = 283;
					Match(LIST_DIVIDER);
					State = 284;
					type();
					}
					}
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 290;
				Match(T__16);
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 294;
				Match(T__17);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '\x12C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x43', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x46', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'M', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'W', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', 'X', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x61', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x64', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', 'r', '\n', '\t', '\f', '\t', '\xE', '\t', 'u', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '~', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x83', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x8B', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\x8E', '\v', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x98', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\x9B', '\v', '\r', '\x5', '\r', '\x9D', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA3', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xAC', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\xB5', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xB8', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xC1', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xCB', '\n', '\x13', '\x5', '\x13', '\xCD', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD2', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x6', '\x15', '\xD7', 
		'\n', '\x15', '\r', '\x15', '\xE', '\x15', '\xD8', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xE0', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x6', '\x17', '\xE6', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\xE7', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\xEF', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x6', '\x19', '\xF5', '\n', '\x19', '\r', '\x19', 
		'\xE', '\x19', '\xF6', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xFE', '\n', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x6', '\x1B', '\x103', '\n', '\x1B', '\r', 
		'\x1B', '\xE', '\x1B', '\x104', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x10C', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x6', '\x1D', '\x111', '\n', '\x1D', 
		'\r', '\x1D', '\xE', '\x1D', '\x112', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x120', '\n', ' ', 
		'\f', ' ', '\xE', ' ', '\x123', '\v', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x127', '\n', ' ', '\x3', ' ', '\x5', ' ', '\x12A', '\n', ' ', '\x3', 
		' ', '\x2', '\x2', '!', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '\x2', '\x4', '\x3', '\x2', '\x1C', '\x1D', '\x3', '\x2', 
		'\x15', '\x17', '\x2', '\x139', '\x2', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'G', '\x3', '\x2', '\x2', '\x2', '\x6', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'P', '\x3', '\x2', '\x2', '\x2', '\n', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'g', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'm', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x14', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x86', '\x3', '\x2', '\x2', '\x2', '\x18', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xC0', '\x3', '\x2', '\x2', '\x2', '\"', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xCC', '\x3', '\x2', '\x2', '\x2', '&', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xD3', '\x3', '\x2', '\x2', '\x2', '*', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xE1', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x34', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x108', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', ':', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x118', '\x3', '\x2', '\x2', '\x2', '>', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x44', '\x5', '\x4', '\x3', '\x2', '\x41', 
		'\x43', '\x5', '\x4', '\x3', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\x5', ':', '\x1E', '\x2', 'H', 'I', '\a', '\x1E', '\x2', 
		'\x2', 'I', 'J', '\a', '\x1A', '\x2', '\x2', 'J', 'L', '\x5', '\x6', '\x4', 
		'\x2', 'K', 'M', '\x5', '\b', '\x5', '\x2', 'L', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\t', '\x2', '\x2', '\x2', 'O', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'V', '\a', '\x18', '\x2', '\x2', 'Q', 'W', '\x5', '\xE', 
		'\b', '\x2', 'R', 'W', '\x5', '\x10', '\t', '\x2', 'S', 'W', '\x5', '\x16', 
		'\f', '\x2', 'T', 'W', '\x5', '\x1E', '\x10', '\x2', 'U', 'W', '\x5', 
		'\n', '\x6', '\x2', 'V', 'Q', '\x3', '\x2', '\x2', '\x2', 'V', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', 
		'\x19', '\x2', '\x2', '[', '\t', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\a', '\x3', '\x2', '\x2', ']', '^', '\a', '\x18', '\x2', '\x2', '^', 
		'\x62', '\x5', '\f', '\a', '\x2', '_', '\x61', '\x5', '\f', '\a', '\x2', 
		'`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x19', '\x2', 
		'\x2', '\x66', '\v', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', ' ', 
		'\x2', '\x2', 'h', '\r', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x4', 
		'\x2', '\x2', 'j', 'k', '\a', '\x1A', '\x2', '\x2', 'k', 'l', '\x5', '<', 
		'\x1F', '\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', 
		'\x5', '\x2', '\x2', 'n', 'o', '\a', '\x18', '\x2', '\x2', 'o', 's', '\x5', 
		'\x12', '\n', '\x2', 'p', 'r', '\x5', '\x12', '\n', '\x2', 'q', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', 
		'\x19', '\x2', '\x2', 'w', '\x11', '\x3', '\x2', '\x2', '\x2', 'x', 'y', 
		'\x5', ':', '\x1E', '\x2', 'y', 'z', '\a', '\x1E', '\x2', '\x2', 'z', 
		'{', '\a', '\x1A', '\x2', '\x2', '{', '}', '\x5', '>', ' ', '\x2', '|', 
		'~', '\x5', '\x14', '\v', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x82', '\a', '\x18', '\x2', '\x2', '\x80', '\x83', '\x5', 
		'\xE', '\b', '\x2', '\x81', '\x83', '\x5', '\n', '\x6', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\x19', '\x2', '\x2', '\x85', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x6', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x18', '\x2', '\x2', '\x88', '\x8C', '\x5', 
		'\x18', '\r', '\x2', '\x89', '\x8B', '\x5', '\x18', '\r', '\x2', '\x8A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x19', '\x2', 
		'\x2', '\x90', '\x17', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x5', 
		':', '\x1E', '\x2', '\x92', '\x93', '\a', '\x1E', '\x2', '\x2', '\x93', 
		'\x9C', '\a', '\a', '\x2', '\x2', '\x94', '\x99', '\x5', '\x1A', '\xE', 
		'\x2', '\x95', '\x96', '\a', '\x1B', '\x2', '\x2', '\x96', '\x98', '\x5', 
		'\x1A', '\xE', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\b', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x1A', '\x2', '\x2', '\xA0', 
		'\xA2', '\x5', '>', ' ', '\x2', '\xA1', '\xA3', '\x5', '\x1C', '\xF', 
		'\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x1E', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x1A', '\x2', 
		'\x2', '\xA6', '\xA7', '\x5', '>', ' ', '\x2', '\xA7', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xAB', '\a', '\x18', '\x2', '\x2', '\xA9', 
		'\xAC', '\x5', '\xE', '\b', '\x2', '\xAA', '\xAC', '\x5', '\n', '\x6', 
		'\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x19', '\x2', 
		'\x2', '\xAE', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\t', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x18', '\x2', '\x2', '\xB1', 
		'\xB6', '\x5', ' ', '\x11', '\x2', '\xB2', '\xB3', '\a', '\x1B', '\x2', 
		'\x2', '\xB3', '\xB5', '\x5', ' ', '\x11', '\x2', '\xB4', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x19', '\x2', '\x2', '\xBA', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xC1', '\x5', '&', '\x14', 
		'\x2', '\xBC', '\xC1', '\x5', '*', '\x16', '\x2', '\xBD', '\xC1', '\x5', 
		'.', '\x18', '\x2', '\xBE', '\xC1', '\x5', '\x32', '\x1A', '\x2', '\xBF', 
		'\xC1', '\x5', '\x36', '\x1C', '\x2', '\xC0', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\a', '\n', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\x1A', '\x2', '\x2', '\xC4', '\xC5', '\x5', '$', '\x13', '\x2', '\xC5', 
		'\xC6', '\a', '\v', '\x2', '\x2', '\xC6', '\xC7', '\x5', '$', '\x13', 
		'\x2', '\xC7', '#', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCD', '\a', 
		'\f', '\x2', '\x2', '\xC9', '\xCB', '\a', '\x1F', '\x2', '\x2', '\xCA', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\r', '\x2', '\x2', 
		'\xCF', '\xD1', '\x5', '>', ' ', '\x2', '\xD0', '\xD2', '\x5', '(', '\x15', 
		'\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\'', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD6', '\a', '\x18', '\x2', '\x2', '\xD4', '\xD7', '\x5', '\xE', '\b', 
		'\x2', '\xD5', '\xD7', '\x5', '\n', '\x6', '\x2', '\xD6', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x19', '\x2', '\x2', '\xDB', 
		')', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\xE', '\x2', '\x2', 
		'\xDD', '\xDF', '\x5', '>', ' ', '\x2', '\xDE', '\xE0', '\x5', ',', '\x17', 
		'\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '+', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE5', '\a', '\x18', '\x2', '\x2', '\xE2', '\xE6', '\x5', '\xE', '\b', 
		'\x2', '\xE3', '\xE6', '\x5', '\"', '\x12', '\x2', '\xE4', '\xE6', '\x5', 
		'\n', '\x6', '\x2', '\xE5', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x19', '\x2', 
		'\x2', '\xEA', '-', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', 
		'\xF', '\x2', '\x2', '\xEC', '\xEE', '\x5', '>', ' ', '\x2', '\xED', '\xEF', 
		'\x5', '\x30', '\x19', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF4', '\a', '\x18', '\x2', '\x2', '\xF1', '\xF5', 
		'\x5', '\xE', '\b', '\x2', '\xF2', '\xF5', '\x5', '\"', '\x12', '\x2', 
		'\xF3', '\xF5', '\x5', '\n', '\x6', '\x2', '\xF4', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\a', '\x19', '\x2', '\x2', '\xF9', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\a', '\x10', '\x2', '\x2', '\xFB', '\xFD', '\x5', '>', 
		' ', '\x2', '\xFC', '\xFE', '\x5', '\x34', '\x1B', '\x2', '\xFD', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\x33', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\a', '\x18', 
		'\x2', '\x2', '\x100', '\x103', '\x5', '\xE', '\b', '\x2', '\x101', '\x103', 
		'\x5', '\n', '\x6', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\a', '\x19', '\x2', '\x2', '\x107', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', '\x11', '\x2', '\x2', 
		'\x109', '\x10B', '\x5', '>', ' ', '\x2', '\x10A', '\x10C', '\x5', '\x38', 
		'\x1D', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x110', '\a', '\x18', '\x2', '\x2', '\x10E', '\x111', 
		'\x5', '\xE', '\b', '\x2', '\x10F', '\x111', '\x5', '\n', '\x6', '\x2', 
		'\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\a', '\x19', '\x2', '\x2', '\x115', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x117', '\t', '\x3', '\x2', '\x2', '\x117', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x119', '\a', ' ', '\x2', '\x2', '\x119', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x126', '\a', '\x1E', '\x2', '\x2', 
		'\x11B', '\x11C', '\a', '\x12', '\x2', '\x2', '\x11C', '\x121', '\x5', 
		'>', ' ', '\x2', '\x11D', '\x11E', '\a', '\x1B', '\x2', '\x2', '\x11E', 
		'\x120', '\x5', '>', ' ', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x123', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x124', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x125', '\a', '\x13', '\x2', '\x2', '\x125', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x126', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\a', '\x14', '\x2', '\x2', 
		'\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '?', '\x3', '\x2', '\x2', '\x2', '%', '\x44', 
		'L', 'V', 'X', '\x62', 's', '}', '\x82', '\x8C', '\x99', '\x9C', '\xA2', 
		'\xAB', '\xB6', '\xC0', '\xCA', '\xCC', '\xD1', '\xD6', '\xD8', '\xDF', 
		'\xE5', '\xE7', '\xEE', '\xF4', '\xF6', '\xFD', '\x102', '\x104', '\x10B', 
		'\x110', '\x112', '\x121', '\x126', '\x129',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
